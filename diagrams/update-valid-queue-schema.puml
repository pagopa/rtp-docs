@startuml
skin rose
title GDP Message - **UPDATE VALID** Flow

queue "GDP Event Hub" as Queue
participant "GDP Message Consumer" as Consumer
participant "SP Creditore" as SPC
participant "SP Debitore" as SPD
participant "Gestore Repository" as GR
database "SRTP" as SRTP

Queue -> Consumer: **GDP Message**
note left: **Status = VALID**

activate Consumer
Consumer -> Consumer: **Check message operation**
alt **Operation == UPDATE** and **Status == VALID**
  Consumer -> SPC: **Process UPDATE VALID operation**
  activate SPC

  SPC -> SPC: **Check RTP status is valid**
  note right
    ✅ Valid RTP statuses:
    - CREATED
    - SENT
    - ACCEPTED
    - USER_ACCEPTED
  end note

  alt **Status is valid**

    SPC -> SRTP: **findRtpByCompositeKey**
    activate SRTP

    alt **RTP exists**
      SRTP --> SPC: **RTP**
      deactivate SRTP

      SPC -> SPD: **POST /sepa-request-to-pay-requests/{id}/cancellation-requests**
      note right: Send **cancellation request** to SP Debitor
      activate SPD

      alt **SP Debtor accepts**
        SPD --> SPC: **201 Created**

        SPC -> SPC: **Set RTP status to CANCELLED**

        SPC -> SRTP: **Save RTP with CANCELLED status**
        activate SRTP
        SRTP --> SPC: **Saved RTP**
        deactivate SRTP

        SPC -> SPD: **POST /sepa-request-to-pay**
        note right: Send **RTP** to SP Debitor

        alt **Debtor accepts**
          SPD --> SPC: **Response**

          SPC -> SPC: **Set RTP status to SENT**

          SPC -> SRTP: **Save RTP with SENT status**
          activate SRTP
          SRTP --> SPC: **Saved RTP**
          deactivate SRTP

        else **Debtor rejects**
          SPD --> SPC: **Error response**
          note right: Based on SP Debitor response

          SPC -> SPC: **Set RTP status to REJECTED**

          SPC -> SRTP: **Save RTP with REJECTED status**
          activate SRTP
          SRTP --> SPC: **Saved RTP**
          deactivate SRTP
        end

      else **SP Debtor rejects**
        SPD --> SPC: **Error response**
        note right: Based on SP Debitor response
        deactivate SPD

        SPC -> SPC: **Set RTP status to ERROR_CANCEL**

        SPC -> SRTP: **Save RTP with ERROR_CANCEL status**
        activate SRTP
        SRTP --> SPC: **Saved RTP**
        deactivate SRTP
      end

      SPC --> Consumer: **Updated RTP**

    else **RTP not found**
      SPC -> SPC: **Create RTP in status CREATED**

      SPC -> SRTP: **Save RTP with CREATED status**
      activate SRTP
      SRTP --> SPC: **Saved RTP**
      deactivate SRTP

      SPC -> SPD: **POST /sepa-request-to-pay**
      note right: Send **RTP** to SP Debitor

      alt **Debtor accepts**
        SPD --> SPC: **Response**

        SPC -> SPC: **Set RTP status to SENT**

        SPC -> SRTP: **Save RTP with SENT status**
        activate SRTP
        SRTP --> SPC: **Saved RTP**
        deactivate SRTP

      else **Debtor rejects**
        SPD --> SPC: **Error response**
        note right: Based on SP Debitor response

        SPC -> SPC: **Set RTP status to REJECTED**

        SPC -> SRTP: **Save RTP with REJECTED status**
        activate SRTP
        SRTP --> SPC: **Saved RTP**
        deactivate SRTP
    end

  else **Invalid RTP status**
    SPC --> Consumer: **Error – Invalid RTP status**
  end

else **Different Operation**
  SPC --> Consumer: **Not triggered**
  note right: Operation is not **UPDATE VALID**
end

deactivate Consumer
@enduml
